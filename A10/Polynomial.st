'From Pharo12.0.0SNAPSHOT of 19 July 2024 [Build information: Pharo-12.0.0+SNAPSHOT.build.1523.sha.3fd20c14be4ec63710f40bb8eb486e1eaf262af2 (64 Bit)] on 1 August 2024 at 10:31:00.310184 pm'!Object subclass: #Polynomial	instanceVariableNames: 'coefficient'	classVariableNames: ''	package: 'COSC059'!!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:58'!= aPoly    "compares two polynomials"    ^ coefficient = aPoly asArray ! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:55'!< aPoly	^ self shouldNotImplement ! !!Polynomial methodsFor: 'comparing' stamp: 'JonDenning 3/7/2017 16:54'!!!= aPoly	^ self ~= aPoly! !!Polynomial methodsFor: 'accessing' stamp: '8/1/2024 19:16'!initialize: initValue	"private: initialize coefficient instance variable"	(initValue isKindOf: (self class))		ifTrue: [ coefficient := (initValue asArray) deepCopy ]		ifFalse: [			(initValue isKindOf: Array)				ifTrue: [ coefficient := initValue deepCopy ]				ifFalse: [ self initialize ]		].		[(self asArray at: self asArray size) = 0] whileTrue: [		| collection |				collection := self asArray asOrderedCollection.		collection removeLast.		coefficient := collection asArray.	]! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:01'!coefficient: power	"return coefficient of power term"	(power >= coefficient size) ifTrue: [ ^ 0 ].	^ coefficient at: power + 1! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:00'!asArray	"return array representation"	^ coefficient deepCopy! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/7/2017 17:01'!degree	"return degree of polynomial"	^ coefficient size - 1! !!Polynomial methodsFor: 'accessing' stamp: 'JonDenning 3/5/2015 17:37'!initialize	super initialize.	coefficient := #( 0 )! !!Polynomial methodsFor: 'accessing' stamp: '8/1/2024 12:53'!aNewMethod: anArgument	^ anArgument! !!Polynomial methodsFor: 'accessing' stamp: '8/1/2024 16:25'!sum: polynomial	| maxLength res |		res := OrderedCollection new.	maxLength := (self asArray size) max: (polynomial asArray size).		1 to: maxLength do: [ :i |		res addLast:			(((i <= polynomial asArray size) ifTrue: [ polynomial asArray at: i. ] ifFalse: [ 0.]) +			((i <= self asArray size) ifTrue: [ self asArray at: i. ] ifFalse: [ 0.]))	].	^ self class new initialize: (res asArray).! !!Polynomial methodsFor: 'accessing' stamp: '8/1/2024 15:59'!evaluate: x	| res |		res := 0.	1 to: (self asArray size) do: [ :i | res := res + (((self asArray) at: i) * (x raisedTo: (i - 1))) ].		^ res.! !!Polynomial methodsFor: 'accessing' stamp: '8/1/2024 16:09'!differentiate	| res |		res := OrderedCollection new.		2 to: self asArray size do: [ :i |		res addLast: (i - 1) * (self asArray at: i)	].	^ self class new initialize: res asArray.! !!Polynomial methodsFor: 'accessing' stamp: '8/1/2024 16:24'!graphFrom: a graphTo: b	| c p xs ys | 	xs := a to: b count: 100.	ys := xs collect: [ :x | self evaluate: x ]. 	c := RSCompositeChart new.	p := RSLinePlot new x: xs y: ys.	c add: p.	c title: 'Graph of the polynomial'.	c xlabel: 'x'.	c ylabel: 'y'.	c addDecoration: RSHorizontalTick new.	c addDecoration: RSVerticalTick new.	c inspect.! !!Polynomial methodsFor: 'public access' stamp: '8/1/2024 16:05'!evaluate	| input x |	input := UIManager default request:'What value do you want to evaluate the polynomial at?'.		x := input asNumber.		^ self evaluate: x.	! !